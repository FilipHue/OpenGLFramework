.TH "Scene" 3 "Sun Apr 9 2023" "OpenGL Framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Scene
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <scene\&.h>\fP
.PP
Inherits \fBWorld\fP\&.
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBCamera\fP * \fBp_scene_camera\fP"
.br
.ti -1c
.RI "\fBCameraInput\fP * \fBp_camera_input\fP"
.br
.ti -1c
.RI "\fBSceneInput\fP * \fBp_scene_input\fP"
.br
.ti -1c
.RI "\fBTextureManger\fP * \fBp_texture_manager\fP"
.br
.ti -1c
.RI "\fBShapeManager\fP * \fBp_shape_manager\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBScene\fP ()"
.br
.ti -1c
.RI "void \fBCreateMesh\fP (const char *name, std::vector< \fBVertex\fP > &vertices, std::vector< unsigned int > &indices, \fBMaterial\fP *\fBmaterial\fP)"
.br
.ti -1c
.RI "void \fBRenderMesh\fP (\fBMesh\fP *mesh, \fBShader\fP *shader, glm::vec3 position)"
.br
.ti -1c
.RI "void \fBRenderMesh\fP (\fBMesh\fP *mesh, \fBShader\fP *shader, glm::vec3 position, const char *texture_name)"
.br
.ti -1c
.RI "void \fBRenderMesh\fP (\fBMesh\fP *mesh, \fBShader\fP *shader, glm::vec3 position, glm::vec3 light_position)"
.br
.ti -1c
.RI "void \fBRenderMesh\fP (\fBMesh\fP *mesh, \fBShader\fP *shader, glm::mat4 model_matrix)"
.br
.ti -1c
.RI "void \fBRenderMesh\fP (\fBMesh\fP *mesh, \fBShader\fP *shader, glm::mat4 model_matrix, const char *texture_name)"
.br
.ti -1c
.RI "void \fBRenderMesh\fP (\fBMesh\fP *mesh, \fBShader\fP *shader, glm::mat4 model_matrix, glm::vec3 light_position)"
.br
.in -1c

Protected Member Functions inherited from \fBInputController\fP
.in +1c
.ti -1c
.RI "virtual void \fBOnInputUpdate\fP (double delta_time, int mods)=0"
.br
.RI "Method for handling continous events (like key presses) "
.ti -1c
.RI "virtual void \fBOnKeyPress\fP (int key, int mods)=0"
.br
.RI "Method for handling key presses\&. "
.ti -1c
.RI "virtual void \fBOnKeyRelease\fP (int key, int mods)=0"
.br
.RI "Method for handling key releases\&. "
.ti -1c
.RI "virtual void \fBOnMouseMove\fP (double x_pos, double y_pos, double delta_x, double delta_y)=0"
.br
.RI "Method for handling mouse movement\&. "
.ti -1c
.RI "virtual void \fBOnMouseButtonPress\fP (double x_pos, double y_pos, int button, int mods)=0"
.br
.RI "Method for handling mouse button presses\&. "
.ti -1c
.RI "virtual void \fBOnMouseButttonRelease\fP (double x_pos, double y_pos, int button, int mods)=0"
.br
.RI "Method for handling mouse button releases\&. "
.ti -1c
.RI "virtual void \fBOnMouseScroll\fP (double x_offset, double y_offset)=0"
.br
.RI "Method for handling mouse scroll\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBWindow\fP * \fBp_window\fP"
.br
.ti -1c
.RI "std::unordered_map< std::string, \fBMesh\fP * > \fBmeshes\fP"
.br
.ti -1c
.RI "std::unordered_map< std::string, \fBShader\fP * > \fBshaders\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBSceneInput\fP"
.br
.ti -1c
.RI "class \fBShapeManager\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Public Member Functions inherited from \fBWorld\fP
.in +1c
.ti -1c
.RI "\fBWorld\fP ()"
.br
.ti -1c
.RI "virtual void \fBInit\fP ()=0"
.br
.ti -1c
.RI "virtual void \fBStartFrame\fP ()=0"
.br
.ti -1c
.RI "virtual void \fBUpdate\fP (double delta_time)=0"
.br
.ti -1c
.RI "virtual void \fBEndFrame\fP ()=0"
.br
.ti -1c
.RI "void \fBRun\fP ()"
.br
.RI "Calls the loop update method while the window is active\&. "
.ti -1c
.RI "void \fBExit\fP ()"
.br
.ti -1c
.RI "double \fBGetDeltaTime\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBInputController\fP
.in +1c
.ti -1c
.RI "\fBInputController\fP ()"
.br
.RI "Method for connecting the input controller to a component\&. "
.ti -1c
.RI "\fB~InputController\fP ()"
.br
.ti -1c
.RI "void \fBToogleEvents\fP ()"
.br
.RI "Method for toggling the state of the input controller (active or not) "
.ti -1c
.RI "bool \fBIsActive\fP ()"
.br
.RI "Method for checking the state of the input controller\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB14\fP of file \fBscene\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Scene::Scene ()\fC [protected]\fP"

.PP
Definition at line \fB3\fP of file \fBscene\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Scene::CreateMesh (const char * name, std::vector< \fBVertex\fP > & vertices, std::vector< unsigned int > & indices, \fBMaterial\fP * material)\fC [protected]\fP"

.PP
Definition at line \fB8\fP of file \fBscene\&.cpp\fP\&.
.SS "void Scene::RenderMesh (\fBMesh\fP * mesh, \fBShader\fP * shader, glm::mat4 model_matrix)\fC [protected]\fP"

.PP
Definition at line \fB101\fP of file \fBscene\&.cpp\fP\&.
.SS "void Scene::RenderMesh (\fBMesh\fP * mesh, \fBShader\fP * shader, glm::mat4 model_matrix, const char * texture_name)\fC [protected]\fP"

.PP
Definition at line \fB116\fP of file \fBscene\&.cpp\fP\&.
.SS "void Scene::RenderMesh (\fBMesh\fP * mesh, \fBShader\fP * shader, glm::mat4 model_matrix, glm::vec3 light_position)\fC [protected]\fP"

.PP
Definition at line \fB136\fP of file \fBscene\&.cpp\fP\&.
.SS "void Scene::RenderMesh (\fBMesh\fP * mesh, \fBShader\fP * shader, glm::vec3 position)\fC [protected]\fP"

.PP
Definition at line \fB17\fP of file \fBscene\&.cpp\fP\&.
.SS "void Scene::RenderMesh (\fBMesh\fP * mesh, \fBShader\fP * shader, glm::vec3 position, const char * texture_name)\fC [protected]\fP"

.PP
Definition at line \fB34\fP of file \fBscene\&.cpp\fP\&.
.SS "void Scene::RenderMesh (\fBMesh\fP * mesh, \fBShader\fP * shader, glm::vec3 position, glm::vec3 light_position)\fC [protected]\fP"

.PP
Definition at line \fB56\fP of file \fBscene\&.cpp\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBSceneInput\fP\fC [friend]\fP"

.PP
Definition at line \fB16\fP of file \fBscene\&.h\fP\&.
.SS "friend class \fBShapeManager\fP\fC [friend]\fP"

.PP
Definition at line \fB17\fP of file \fBscene\&.h\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "std::unordered_map<std::string, \fBMesh\fP*> Scene::meshes\fC [protected]\fP"

.PP
Definition at line \fB40\fP of file \fBscene\&.h\fP\&.
.SS "\fBCameraInput\fP* Scene::p_camera_input"

.PP
Definition at line \fB21\fP of file \fBscene\&.h\fP\&.
.SS "\fBCamera\fP* Scene::p_scene_camera"

.PP
Definition at line \fB20\fP of file \fBscene\&.h\fP\&.
.SS "\fBSceneInput\fP* Scene::p_scene_input"

.PP
Definition at line \fB22\fP of file \fBscene\&.h\fP\&.
.SS "\fBShapeManager\fP* Scene::p_shape_manager"

.PP
Definition at line \fB24\fP of file \fBscene\&.h\fP\&.
.SS "\fBTextureManger\fP* Scene::p_texture_manager"

.PP
Definition at line \fB23\fP of file \fBscene\&.h\fP\&.
.SS "\fBWindow\fP* Scene::p_window\fC [protected]\fP"

.PP
Definition at line \fB39\fP of file \fBscene\&.h\fP\&.
.SS "std::unordered_map<std::string, \fBShader\fP*> Scene::shaders\fC [protected]\fP"

.PP
Definition at line \fB41\fP of file \fBscene\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OpenGL Framework from the source code\&.
