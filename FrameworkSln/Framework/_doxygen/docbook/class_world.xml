<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_world" xml:lang="en-US">
<title>World Class Reference</title>
<indexterm><primary>World</primary></indexterm>
<para>
<computeroutput>#include &lt;world.h&gt;</computeroutput>
</para>
Inheritance diagram for World:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_world__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for World:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_world__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_world_1afa39d4e6f714a7a3691ac0c656f5e8a8">World</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_world_1aa729424b4809c70042dcd7e97c16c3ee">Init</link> ()=0</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_world_1a0ed085d9bdc6f831dcf462f968846166">StartFrame</link> ()=0</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_world_1a3082ec0230bd04bf977a4e27599bb8c1">Update</link> (double delta_time)=0</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_world_1aaa6d2623410d5e8a789ec917639597ef">EndFrame</link> ()=0</para>
</listitem>
            <listitem><para>void <link linkend="_class_world_1acea6eb85cbad062ded1e62193496e9f5">Run</link> ()</para>

<para>Calls the loop update method while the window is active. </para>
</listitem>
            <listitem><para>void <link linkend="_class_world_1afa3dd686cb3b3f3084d6c64e9d640820">Exit</link> ()</para>
</listitem>
            <listitem><para>double <link linkend="_class_world_1a09f54785fbc2dd9ce3119fc6ef7e9fc4">GetDeltaTime</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_input_controller">InputController</link>        <itemizedlist>
            <listitem><para><link linkend="_class_input_controller_1aba927fffeb0bf4c4fd0835d4dfbdfaec">InputController</link> ()</para>

<para>Method for connecting the input controller to a component. </para>
</listitem>
            <listitem><para><link linkend="_class_input_controller_1aa36b76b8144da60b26cd9b8298aa5627">~InputController</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_input_controller_1a7df1a99839e3d5561e6e44cec1b9789b">ToogleEvents</link> ()</para>

<para>Method for toggling the state of the input controller (active or not) </para>
</listitem>
            <listitem><para>bool <link linkend="_class_input_controller_1a5ce94207ea1b3fd285f2782e96b9407a">IsActive</link> ()</para>

<para>Method for checking the state of the input controller. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Protected Member Functions inherited from <link linkend="_class_input_controller">InputController</link>        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_input_controller_1af2f53ee2e8c951613d83617f259c92d9">OnInputUpdate</link> (double delta_time, int mods)=0</para>

<para>Method for handling continous events (like key presses) </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_input_controller_1ad5b3dca01698d57084e7a7ec5e118872">OnKeyPress</link> (int key, int mods)=0</para>

<para>Method for handling key presses. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_input_controller_1ad3e3d7ed6ad1bc31880ae39dd11dcd00">OnKeyRelease</link> (int key, int mods)=0</para>

<para>Method for handling key releases. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_input_controller_1ac66cbb6519379d2809aab3780819c571">OnMouseMove</link> (double x_pos, double y_pos, double delta_x, double delta_y)=0</para>

<para>Method for handling mouse movement. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_input_controller_1aba038c7018d1f62c228ca77210986e9a">OnMouseButtonPress</link> (double x_pos, double y_pos, int button, int mods)=0</para>

<para>Method for handling mouse button presses. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_input_controller_1a11cfafe3c6c4dd766df4cd014173c1d8">OnMouseButttonRelease</link> (double x_pos, double y_pos, int button, int mods)=0</para>

<para>Method for handling mouse button releases. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_input_controller_1adc73cbb0d307a92462adf0d70f2d1162">OnMouseScroll</link> (double x_offset, double y_offset)=0</para>

<para>Method for handling mouse scroll. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_world_8h_source_1l00006">6</link> of file <link linkend="_world_8h_source">world.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_world_1afa39d4e6f714a7a3691ac0c656f5e8a8"/><section>
    <title>World()</title>
<indexterm><primary>World</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>World</secondary></indexterm>
<para><computeroutput>World::World ( )</computeroutput></para><para>
Definition at line <link linkend="_world_8cpp_source_1l00003">3</link> of file <link linkend="_world_8cpp_source">world.cpp</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_world_1aaa6d2623410d5e8a789ec917639597ef"/><section>
    <title>EndFrame()</title>
<indexterm><primary>EndFrame</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>EndFrame</secondary></indexterm>
<para><computeroutput>virtual void World::EndFrame ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_world_1afa3dd686cb3b3f3084d6c64e9d640820"/><section>
    <title>Exit()</title>
<indexterm><primary>Exit</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>Exit</secondary></indexterm>
<para><computeroutput>void World::Exit ( )</computeroutput></para><para>
Definition at line <link linkend="_world_8cpp_source_1l00020">20</link> of file <link linkend="_world_8cpp_source">world.cpp</link>.</para>
</section>
<anchor xml:id="_class_world_1a09f54785fbc2dd9ce3119fc6ef7e9fc4"/><section>
    <title>GetDeltaTime()</title>
<indexterm><primary>GetDeltaTime</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>GetDeltaTime</secondary></indexterm>
<para><computeroutput>double World::GetDeltaTime ( )</computeroutput></para><para>
Definition at line <link linkend="_world_8cpp_source_1l00025">25</link> of file <link linkend="_world_8cpp_source">world.cpp</link>.</para>
</section>
<anchor xml:id="_class_world_1aa729424b4809c70042dcd7e97c16c3ee"/><section>
    <title>Init()</title>
<indexterm><primary>Init</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>Init</secondary></indexterm>
<para><computeroutput>virtual void World::Init ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_world_1acea6eb85cbad062ded1e62193496e9f5"/><section>
    <title>Run()</title>
<indexterm><primary>Run</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>Run</secondary></indexterm>
<para><computeroutput>void World::Run ( )</computeroutput></para><para>

<para>Calls the loop update method while the window is active. </para>
</para>
<para>
Definition at line <link linkend="_world_8cpp_source_1l00009">9</link> of file <link linkend="_world_8cpp_source">world.cpp</link>.</para>
</section>
<anchor xml:id="_class_world_1a0ed085d9bdc6f831dcf462f968846166"/><section>
    <title>StartFrame()</title>
<indexterm><primary>StartFrame</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>StartFrame</secondary></indexterm>
<para><computeroutput>virtual void World::StartFrame ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_world_1a3082ec0230bd04bf977a4e27599bb8c1"/><section>
    <title>Update()</title>
<indexterm><primary>Update</primary><secondary>World</secondary></indexterm>
<indexterm><primary>World</primary><secondary>Update</secondary></indexterm>
<para><computeroutput>virtual void World::Update (double delta_time)<computeroutput>[pure virtual]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
src/<link linkend="_world_8h">world.h</link>src/<link linkend="_world_8cpp">world.cpp</link></section>
</section>
