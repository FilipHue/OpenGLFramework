.TH "InputController" 3 "Sun Apr 9 2023" "OpenGL Framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
InputController
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <input_controller\&.h>\fP
.PP
Inherited by \fBCameraInput\fP, \fBSceneInput\fP, and \fBWorld\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInputController\fP ()"
.br
.RI "Method for connecting the input controller to a component\&. "
.ti -1c
.RI "\fB~InputController\fP ()"
.br
.ti -1c
.RI "void \fBToogleEvents\fP ()"
.br
.RI "Method for toggling the state of the input controller (active or not) "
.ti -1c
.RI "bool \fBIsActive\fP ()"
.br
.RI "Method for checking the state of the input controller\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBOnInputUpdate\fP (double delta_time, int mods)=0"
.br
.RI "Method for handling continous events (like key presses) "
.ti -1c
.RI "virtual void \fBOnKeyPress\fP (int key, int mods)=0"
.br
.RI "Method for handling key presses\&. "
.ti -1c
.RI "virtual void \fBOnKeyRelease\fP (int key, int mods)=0"
.br
.RI "Method for handling key releases\&. "
.ti -1c
.RI "virtual void \fBOnMouseMove\fP (double x_pos, double y_pos, double delta_x, double delta_y)=0"
.br
.RI "Method for handling mouse movement\&. "
.ti -1c
.RI "virtual void \fBOnMouseButtonPress\fP (double x_pos, double y_pos, int button, int mods)=0"
.br
.RI "Method for handling mouse button presses\&. "
.ti -1c
.RI "virtual void \fBOnMouseButttonRelease\fP (double x_pos, double y_pos, int button, int mods)=0"
.br
.RI "Method for handling mouse button releases\&. "
.ti -1c
.RI "virtual void \fBOnMouseScroll\fP (double x_offset, double y_offset)=0"
.br
.RI "Method for handling mouse scroll\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBWindow\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB5\fP of file \fBinput_controller\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "InputController::InputController ()"

.PP
Method for connecting the input controller to a component\&. 
.PP
Definition at line \fB3\fP of file \fBinput_controller\&.cpp\fP\&.
.SS "InputController::~InputController ()"

.PP
Definition at line \fB9\fP of file \fBinput_controller\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "bool InputController::IsActive ()"

.PP
Method for checking the state of the input controller\&. 
.PP
\fBReturns\fP
.RS 4
1 if it's active or 0 otheriwse 
.RE
.PP

.PP
Definition at line \fB19\fP of file \fBinput_controller\&.cpp\fP\&.
.SS "virtual void InputController::OnInputUpdate (double delta_time, int mods)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Method for handling continous events (like key presses) 
.PP
\fBParameters\fP
.RS 4
\fIdelta_time\fP The time between the current frame and last frame 
.br
\fImods\fP The code of combination presses with special keys (L_SHIFT, L_ALT, L_CTRL, R_SHIFT, R_ALT, R_CTRL) 
.RE
.PP

.SS "virtual void InputController::OnKeyPress (int key, int mods)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Method for handling key presses\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP The code of the pressed key 
.br
\fImods\fP The code of combination presses with special keys (L_SHIFT, L_ALT, L_CTRL, R_SHIFT, R_ALT, R_CTRL) 
.RE
.PP

.PP
Implemented in \fBSceneInput\fP\&.
.SS "virtual void InputController::OnKeyRelease (int key, int mods)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Method for handling key releases\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP The code of the released key 
.br
\fImods\fP The code of combination presses with special keys (L_SHIFT, L_ALT, L_CTRL, R_SHIFT, R_ALT, R_CTRL) 
.RE
.PP

.SS "virtual void InputController::OnMouseButtonPress (double x_pos, double y_pos, int button, int mods)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Method for handling mouse button presses\&. 
.PP
\fBParameters\fP
.RS 4
\fIx_pos\fP The X position of the mouse at the time of the button press 
.br
\fIy_pos\fP The Y position of the mouse at the time of the button press 
.br
\fIbutton\fP The code of the button pressed 
.br
\fImods\fP The code of combination presses with special keys (L_SHIFT, L_ALT, L_CTRL, R_SHIFT, R_ALT, R_CTRL) 
.RE
.PP

.SS "virtual void InputController::OnMouseButttonRelease (double x_pos, double y_pos, int button, int mods)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Method for handling mouse button releases\&. 
.PP
\fBParameters\fP
.RS 4
\fIx_pos\fP The X position of the mouse at the time of the button release 
.br
\fIy_pos\fP The Y position of the mouse at the time of the button release 
.br
\fIbutton\fP The code of the button released 
.br
\fImods\fP The code of combination presses with special keys (L_SHIFT, L_ALT, L_CTRL, R_SHIFT, R_ALT, R_CTRL) 
.RE
.PP

.SS "virtual void InputController::OnMouseMove (double x_pos, double y_pos, double delta_x, double delta_y)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Method for handling mouse movement\&. 
.PP
\fBParameters\fP
.RS 4
\fIx_pos\fP The X position of the mouse at the time of the movement 
.br
\fIy_pos\fP The Y position of the mouse at the time of the movement 
.br
\fIdelta_x\fP The distance between the last X position of the mouse and x_pos 
.br
\fIdelta_y\fP The distance between the last Y position of the mouse and y_pos 
.RE
.PP

.SS "virtual void InputController::OnMouseScroll (double x_offset, double y_offset)\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Method for handling mouse scroll\&. 
.PP
\fBParameters\fP
.RS 4
\fIx_offset\fP The X offset of the scroll 
.br
\fIy_offset\fP The Y offset of the scroll 
.RE
.PP

.SS "void InputController::ToogleEvents ()"

.PP
Method for toggling the state of the input controller (active or not) 
.PP
Definition at line \fB13\fP of file \fBinput_controller\&.cpp\fP\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBWindow\fP\fC [friend]\fP"

.PP
Definition at line \fB7\fP of file \fBinput_controller\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OpenGL Framework from the source code\&.
