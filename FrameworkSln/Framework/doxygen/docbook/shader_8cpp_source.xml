<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_shader_8cpp_source" xml:lang="en-US">
<title>shader.cpp</title>
<indexterm><primary>src/managers/shader/shader.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_shader_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_shader_8h">shader.h</link>&quot;</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00002"/>00002 
<anchor xml:id="_shader_8cpp_source_1l00003"/><link linkend="_class_shader_1a399bb2d0c75ad2ab849eb5c8a4d7575f">00003</link> <link linkend="_class_shader_1a399bb2d0c75ad2ab849eb5c8a4d7575f">Shader::Shader</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;vertex_shader_path,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;fragment_shader_path)
<anchor xml:id="_shader_8cpp_source_1l00004"/>00004 {
<anchor xml:id="_shader_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;vertex&#32;and&#32;fragment&#32;shader&#32;source&#32;code</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;std::string&#32;vertex_shader_code;
<anchor xml:id="_shader_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;std::ifstream&#32;vertex_shader_file;
<anchor xml:id="_shader_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;std::string&#32;fragment_shader_code;
<anchor xml:id="_shader_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;std::ifstream&#32;fragment_shader_file;
<anchor xml:id="_shader_8cpp_source_1l00010"/>00010 
<anchor xml:id="_shader_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;vertex_shader_file.exceptions(std::ifstream::failbit&#32;|&#32;std::ifstream::badbit);
<anchor xml:id="_shader_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;fragment_shader_file.exceptions(std::ifstream::failbit&#32;|&#32;std::ifstream::badbit);
<anchor xml:id="_shader_8cpp_source_1l00013"/>00013 
<anchor xml:id="_shader_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;{
<anchor xml:id="_shader_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertex_shader_file.open(vertex_shader_path);
<anchor xml:id="_shader_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fragment_shader_file.open(fragment_shader_path);
<anchor xml:id="_shader_8cpp_source_1l00018"/>00018 
<anchor xml:id="_shader_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;vertex_shader_stream;
<anchor xml:id="_shader_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;fragment_shader_stream;
<anchor xml:id="_shader_8cpp_source_1l00021"/>00021 
<anchor xml:id="_shader_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertex_shader_stream&#32;&lt;&lt;&#32;vertex_shader_file.rdbuf();
<anchor xml:id="_shader_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fragment_shader_stream&#32;&lt;&lt;&#32;fragment_shader_file.rdbuf();
<anchor xml:id="_shader_8cpp_source_1l00024"/>00024 
<anchor xml:id="_shader_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertex_shader_file.close();
<anchor xml:id="_shader_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fragment_shader_file.close();
<anchor xml:id="_shader_8cpp_source_1l00027"/>00027 
<anchor xml:id="_shader_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertex_shader_code&#32;=&#32;vertex_shader_stream.str();
<anchor xml:id="_shader_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fragment_shader_code&#32;=&#32;fragment_shader_stream.str();
<anchor xml:id="_shader_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;}
<anchor xml:id="_shader_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(std::ifstream::failure&#32;e)
<anchor xml:id="_shader_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;{
<anchor xml:id="_shader_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1aee23df25d91dd3dc395dbe9f228d0dc5">SHADER_ERROR</link>(<emphasis role="stringliteral">&quot;SHADER&#32;FILE&#32;NOT&#32;SUCCESFULLY&#32;READ&quot;</emphasis>);
<anchor xml:id="_shader_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;}
<anchor xml:id="_shader_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;vertex_code&#32;=&#32;vertex_shader_code.c_str();
<anchor xml:id="_shader_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;fragment_code&#32;=&#32;fragment_shader_code.c_str();
<anchor xml:id="_shader_8cpp_source_1l00037"/>00037 
<anchor xml:id="_shader_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compile&#32;shaders</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertex_shader,&#32;fragment_shader;
<anchor xml:id="_shader_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;success;
<anchor xml:id="_shader_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;infoLog[512];
<anchor xml:id="_shader_8cpp_source_1l00042"/>00042 
<anchor xml:id="_shader_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;vertex_shader&#32;=&#32;glCreateShader(GL_VERTEX_SHADER);
<anchor xml:id="_shader_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;glShaderSource(vertex_shader,&#32;1,&#32;&amp;vertex_code,&#32;NULL);
<anchor xml:id="_shader_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;glCompileShader(vertex_shader);
<anchor xml:id="_shader_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;glGetShaderiv(vertex_shader,&#32;GL_COMPILE_STATUS,&#32;&amp;success);
<anchor xml:id="_shader_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!success)&#32;{
<anchor xml:id="_shader_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glGetShaderInfoLog(vertex_shader,&#32;512,&#32;NULL,&#32;infoLog);
<anchor xml:id="_shader_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1aee23df25d91dd3dc395dbe9f228d0dc5">SHADER_ERROR</link>(<emphasis role="stringliteral">&quot;VERTEX&#32;SHADER&#32;COMPILATION&#32;FAILED\n{}&quot;</emphasis>,&#32;infoLog);
<anchor xml:id="_shader_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;}
<anchor xml:id="_shader_8cpp_source_1l00051"/>00051 
<anchor xml:id="_shader_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;fragment_shader&#32;=&#32;glCreateShader(GL_FRAGMENT_SHADER);
<anchor xml:id="_shader_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;glShaderSource(fragment_shader,&#32;1,&#32;&amp;fragment_code,&#32;NULL);
<anchor xml:id="_shader_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;glCompileShader(fragment_shader);
<anchor xml:id="_shader_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;glGetShaderiv(fragment_shader,&#32;GL_COMPILE_STATUS,&#32;&amp;success);
<anchor xml:id="_shader_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!success)&#32;{
<anchor xml:id="_shader_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glGetShaderInfoLog(vertex_shader,&#32;512,&#32;NULL,&#32;infoLog);
<anchor xml:id="_shader_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1aee23df25d91dd3dc395dbe9f228d0dc5">SHADER_ERROR</link>(<emphasis role="stringliteral">&quot;FRAGMENT&#32;SHADER&#32;COMPILATION&#32;FAILED\n{}&quot;</emphasis>,&#32;infoLog);
<anchor xml:id="_shader_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;}
<anchor xml:id="_shader_8cpp_source_1l00060"/>00060 
<anchor xml:id="_shader_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>&#32;=&#32;glCreateProgram();
<anchor xml:id="_shader_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;glAttachShader(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;vertex_shader);
<anchor xml:id="_shader_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;glAttachShader(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;fragment_shader);
<anchor xml:id="_shader_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;glLinkProgram(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>);
<anchor xml:id="_shader_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;glGetProgramiv(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;GL_LINK_STATUS,&#32;&amp;success);
<anchor xml:id="_shader_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!success)
<anchor xml:id="_shader_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;{
<anchor xml:id="_shader_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1aee23df25d91dd3dc395dbe9f228d0dc5">SHADER_ERROR</link>(<emphasis role="stringliteral">&quot;SHADER&#32;PROGRAM&#32;LINKING&#32;FAILED&quot;</emphasis>);
<anchor xml:id="_shader_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;}
<anchor xml:id="_shader_8cpp_source_1l00070"/>00070 
<anchor xml:id="_shader_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;glDeleteShader(vertex_shader);
<anchor xml:id="_shader_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;glDeleteShader(fragment_shader);
<anchor xml:id="_shader_8cpp_source_1l00073"/>00073 }
<anchor xml:id="_shader_8cpp_source_1l00074"/>00074 
<anchor xml:id="_shader_8cpp_source_1l00075"/><link linkend="_class_shader_1a6b11327cff651ffdb22988b6917b1650">00075</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1a6b11327cff651ffdb22988b6917b1650">Shader::Use</link>()
<anchor xml:id="_shader_8cpp_source_1l00076"/>00076 {
<anchor xml:id="_shader_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;glUseProgram(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>);
<anchor xml:id="_shader_8cpp_source_1l00078"/>00078 }
<anchor xml:id="_shader_8cpp_source_1l00079"/>00079 
<anchor xml:id="_shader_8cpp_source_1l00080"/><link linkend="_class_shader_1a70cd07acf03715e4e927df1be5c5b5a0">00080</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1a70cd07acf03715e4e927df1be5c5b5a0">Shader::SetBool</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00081"/>00081 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;glUniform1i(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;(<emphasis role="keywordtype">int</emphasis>)value);
<anchor xml:id="_shader_8cpp_source_1l00083"/>00083 }
<anchor xml:id="_shader_8cpp_source_1l00084"/>00084 
<anchor xml:id="_shader_8cpp_source_1l00085"/><link linkend="_class_shader_1a645ef3753b1fc09a30dbb26f817d88e5">00085</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1a645ef3753b1fc09a30dbb26f817d88e5">Shader::SetInt</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00086"/>00086 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;glUniform1i(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;value);
<anchor xml:id="_shader_8cpp_source_1l00088"/>00088 }
<anchor xml:id="_shader_8cpp_source_1l00089"/>00089 
<anchor xml:id="_shader_8cpp_source_1l00090"/><link linkend="_class_shader_1ac20ee02a436e4baeb63dde08a0364574">00090</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1ac20ee02a436e4baeb63dde08a0364574">Shader::SetFloat</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;<emphasis role="keywordtype">float</emphasis>&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00091"/>00091 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;glUniform1f(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;value);
<anchor xml:id="_shader_8cpp_source_1l00093"/>00093 }
<anchor xml:id="_shader_8cpp_source_1l00094"/>00094 
<anchor xml:id="_shader_8cpp_source_1l00095"/><link linkend="_class_shader_1a3a6e99e301ccecf029b1848d0ae9cfa9">00095</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1a3a6e99e301ccecf029b1848d0ae9cfa9">Shader::SetVec2</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;glm::vec2&amp;&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00096"/>00096 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;glUniform2fv(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;1,&#32;glm::value_ptr(value));
<anchor xml:id="_shader_8cpp_source_1l00098"/>00098 }
<anchor xml:id="_shader_8cpp_source_1l00099"/>00099 
<anchor xml:id="_shader_8cpp_source_1l00100"/><link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">00100</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">Shader::SetVec3</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;glm::vec3&amp;&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00101"/>00101 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;glUniform3fv(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;1,&#32;glm::value_ptr(value));
<anchor xml:id="_shader_8cpp_source_1l00103"/>00103 }
<anchor xml:id="_shader_8cpp_source_1l00104"/>00104 
<anchor xml:id="_shader_8cpp_source_1l00105"/><link linkend="_class_shader_1abb9700672c86727c5b895a74f361fa2d">00105</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1abb9700672c86727c5b895a74f361fa2d">Shader::SetVec4</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;glm::vec4&amp;&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00106"/>00106 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;glUniform4fv(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;1,&#32;glm::value_ptr(value));
<anchor xml:id="_shader_8cpp_source_1l00108"/>00108 }
<anchor xml:id="_shader_8cpp_source_1l00109"/>00109 
<anchor xml:id="_shader_8cpp_source_1l00110"/><link linkend="_class_shader_1af7a3746572efb2b89fed45bc52c3f7d5">00110</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1af7a3746572efb2b89fed45bc52c3f7d5">Shader::SetMat2</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;glm::mat2&amp;&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00111"/>00111 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;glUniformMatrix2fv(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;1,&#32;GL_FALSE,&#32;glm::value_ptr(value));
<anchor xml:id="_shader_8cpp_source_1l00113"/>00113 }
<anchor xml:id="_shader_8cpp_source_1l00114"/>00114 
<anchor xml:id="_shader_8cpp_source_1l00115"/><link linkend="_class_shader_1ad58277efb139b843f9f0b3d5576c4f73">00115</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1ad58277efb139b843f9f0b3d5576c4f73">Shader::SetMat3</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;glm::mat3&amp;&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00116"/>00116 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;glUniformMatrix3fv(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;1,&#32;GL_FALSE,&#32;glm::value_ptr(value));
<anchor xml:id="_shader_8cpp_source_1l00118"/>00118 }
<anchor xml:id="_shader_8cpp_source_1l00119"/>00119 
<anchor xml:id="_shader_8cpp_source_1l00120"/><link linkend="_class_shader_1a250ff0e81a022d4ab8ab1f8206e8c91b">00120</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_shader_1a250ff0e81a022d4ab8ab1f8206e8c91b">Shader::SetMat4</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name,&#32;glm::mat4&amp;&#32;value)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_shader_8cpp_source_1l00121"/>00121 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_shader_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;glUniformMatrix4fv(glGetUniformLocation(<link linkend="_class_shader_1acca962099a3587a3d6b5c8e8e54049f8">shaderID</link>,&#32;name.c_str()),&#32;1,&#32;GL_FALSE,&#32;glm::value_ptr(value));
<anchor xml:id="_shader_8cpp_source_1l00123"/>00123 }
</programlisting></section>
