<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_window" xml:lang="en-US">
<title>Window Class Reference</title>
<indexterm><primary>Window</primary></indexterm>
<para>
<computeroutput>#include &lt;window.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_window_1aeb0aac2cdf44390e4b9f1a7f8fb93de5">Init</link> (<link linkend="_structwindow__properties">window_properties</link> *wp)</para>

<para>Method for initializing the glfw and glad library, setting window hints and creating the window context. </para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1a89c434ec340b4594c6c8af3f0bf58c9b">Shutdown</link> ()</para>

<para>Method for terminating the window context. </para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1a5773af5bbba89347336d9a8793340184">PollEvents</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1abe1b83eda6980f2b9964aab08b5310ed">SwapBuffers</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_window_1a6aa86d4800090cfeb56c52f63383c179">ShouldClose</link> ()</para>
</listitem>
            <listitem><para>GLFWwindow * <link linkend="_class_window_1a682df3064b8c04aee17f6c159829a764">GetNativeWindow</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1a822c4b9c7a8ebd77fa853f6443cae790">SetWindowHints</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1a03541a688392c47a9606147c9941f0b9">SetWindowCallbacks</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1a4b30df6e4bd8704065b014bd12817c12">SetCursor</link> (int x_pos, int y_pos)</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1ad26ca8fe4b6a3c549e1d44a7941ae2e7">CenterCursor</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1a3db46803e892142874ad9e39bce2004c">ShowCursor</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1a4017aa91ea5bd5f59f1bc43c77415ce0">HideCursor</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1ae79b44d204313d7c4be587f894c33557">DisableCursor</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1aee3c5794cfecf72f78ed2a0af2ef6acc">SetWindow</link> (int x_pos, int y_pos)</para>
</listitem>
            <listitem><para>void <link linkend="_class_window_1ab3ef86066c7f15caaee92f25fca6e389">CenterWindow</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_window_1a012b72d666865ee42bf51ba8eff35eb1">GetContinousPress</link> (int key)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_window_1a5873f04865a181dbf7dfbefc33fc5704">KeyCallbacks</link> (int key, int scancode, int action, int mods)</para>

<para>Method for handling keyboard input. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_window_1aaead0b344c438ab4a8d6556cadfc2977">MouseButtonCallbacks</link> (int button, int action, int mods)</para>

<para>Method for handling mouse button input. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_window_1a0c2dcc34465f43dee3eaec3f30b3ce60">MouseMoveCallbacks</link> (double x_pos, double y_pos)</para>

<para>Method for handling mouse movement. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_window_1a5d495d5437cc87885b68ee0fcb886039">MouseScrollCallbacks</link> (double x_offset, double y_offset)</para>

<para>Method for handling mouse scroll. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_window_1a068d24ef772bf4be412269b7818f0a80">ContinousEvents</link> (double delta_time)</para>

<para>Method for handling continous events (continous key press, for example) </para>
</listitem>
            <listitem><para>static void <link linkend="_class_window_1a6ca97820bbc4ae116168d7241ae737e6">SubscribeToEvents</link> (<link linkend="_class_input_controller">InputController</link> *ic)</para>

<para>Method for connecting an input controller to the current window (for &quot;listening&quot; to events) </para>
</listitem>
            <listitem><para>static void <link linkend="_class_window_1aebd62a7ffa92777ebf4ec5bc6b1068fc">UnsubscribeFromEvents</link> (<link linkend="_class_input_controller">InputController</link> *ic)</para>

<para>Method for disconnecting an input controller from the current window. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>glm::ivec2 <link linkend="_class_window_1a232a8164adde7ff4f2dd69bc46819dc3">resolution</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_window_1adb814fa90d9b6dfb6aaacf436d3b6ee0">WindowCallbacks</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_window_1a083d5a8d8c2dd3a28d1f55d2965db0ab">InputController</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_window_8h_source_1l00015">15</link> of file <link linkend="_window_8h_source">window.h</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_window_1ad26ca8fe4b6a3c549e1d44a7941ae2e7"/><section>
    <title>CenterCursor()</title>
<indexterm><primary>CenterCursor</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>CenterCursor</secondary></indexterm>
<para><computeroutput>void Window::CenterCursor ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00167">167</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1ab3ef86066c7f15caaee92f25fca6e389"/><section>
    <title>CenterWindow()</title>
<indexterm><primary>CenterWindow</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>CenterWindow</secondary></indexterm>
<para><computeroutput>void Window::CenterWindow ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00194">194</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a068d24ef772bf4be412269b7818f0a80"/><section>
    <title>ContinousEvents()</title>
<indexterm><primary>ContinousEvents</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>ContinousEvents</secondary></indexterm>
<para><computeroutput>void Window::ContinousEvents (double delta_time)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Method for handling continous events (continous key press, for example) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>delta_time</entry><entry>
<para>The time between the last frame and the current frame </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00133">133</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1ae79b44d204313d7c4be587f894c33557"/><section>
    <title>DisableCursor()</title>
<indexterm><primary>DisableCursor</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>DisableCursor</secondary></indexterm>
<para><computeroutput>void Window::DisableCursor ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00184">184</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a012b72d666865ee42bf51ba8eff35eb1"/><section>
    <title>GetContinousPress()</title>
<indexterm><primary>GetContinousPress</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>GetContinousPress</secondary></indexterm>
<para><computeroutput>bool Window::GetContinousPress (int key)</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00199">199</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a682df3064b8c04aee17f6c159829a764"/><section>
    <title>GetNativeWindow()</title>
<indexterm><primary>GetNativeWindow</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>GetNativeWindow</secondary></indexterm>
<para><computeroutput>GLFWwindow * Window::GetNativeWindow ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00078">78</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a4017aa91ea5bd5f59f1bc43c77415ce0"/><section>
    <title>HideCursor()</title>
<indexterm><primary>HideCursor</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>HideCursor</secondary></indexterm>
<para><computeroutput>void Window::HideCursor ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00179">179</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1aeb0aac2cdf44390e4b9f1a7f8fb93de5"/><section>
    <title>Init()</title>
<indexterm><primary>Init</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>Init</secondary></indexterm>
<para><computeroutput>void Window::Init (<link linkend="_structwindow__properties">window_properties</link> * wp)</computeroutput></para><para>

<para>Method for initializing the glfw and glad library, setting window hints and creating the window context. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>wp</entry><entry>
<para>Structure for window properties </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00017">17</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a5873f04865a181dbf7dfbefc33fc5704"/><section>
    <title>KeyCallbacks()</title>
<indexterm><primary>KeyCallbacks</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>KeyCallbacks</secondary></indexterm>
<para><computeroutput>void Window::KeyCallbacks (int key, int scancode, int action, int mods)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Method for handling keyboard input. </para>
</para>

<para>See window_callbacks for more information </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00084">84</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1aaead0b344c438ab4a8d6556cadfc2977"/><section>
    <title>MouseButtonCallbacks()</title>
<indexterm><primary>MouseButtonCallbacks</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>MouseButtonCallbacks</secondary></indexterm>
<para><computeroutput>void Window::MouseButtonCallbacks (int button, int action, int mods)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Method for handling mouse button input. </para>
</para>

<para>See window_callbacks for more information </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00097">97</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a0c2dcc34465f43dee3eaec3f30b3ce60"/><section>
    <title>MouseMoveCallbacks()</title>
<indexterm><primary>MouseMoveCallbacks</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>MouseMoveCallbacks</secondary></indexterm>
<para><computeroutput>void Window::MouseMoveCallbacks (double x_pos, double y_pos)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Method for handling mouse movement. </para>
</para>

<para>See window_callbacks for more information </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00105">105</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a5d495d5437cc87885b68ee0fcb886039"/><section>
    <title>MouseScrollCallbacks()</title>
<indexterm><primary>MouseScrollCallbacks</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>MouseScrollCallbacks</secondary></indexterm>
<para><computeroutput>void Window::MouseScrollCallbacks (double x_offset, double y_offset)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Method for handling mouse scroll. </para>
</para>

<para>See window_callbacks for more information </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00126">126</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a5773af5bbba89347336d9a8793340184"/><section>
    <title>PollEvents()</title>
<indexterm><primary>PollEvents</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>PollEvents</secondary></indexterm>
<para><computeroutput>void Window::PollEvents ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00061">61</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a4b30df6e4bd8704065b014bd12817c12"/><section>
    <title>SetCursor()</title>
<indexterm><primary>SetCursor</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>SetCursor</secondary></indexterm>
<para><computeroutput>void Window::SetCursor (int x_pos, int y_pos)</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00162">162</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1aee3c5794cfecf72f78ed2a0af2ef6acc"/><section>
    <title>SetWindow()</title>
<indexterm><primary>SetWindow</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>SetWindow</secondary></indexterm>
<para><computeroutput>void Window::SetWindow (int x_pos, int y_pos)</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00189">189</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a03541a688392c47a9606147c9941f0b9"/><section>
    <title>SetWindowCallbacks()</title>
<indexterm><primary>SetWindowCallbacks</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>SetWindowCallbacks</secondary></indexterm>
<para><computeroutput>void Window::SetWindowCallbacks ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00154">154</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a822c4b9c7a8ebd77fa853f6443cae790"/><section>
    <title>SetWindowHints()</title>
<indexterm><primary>SetWindowHints</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>SetWindowHints</secondary></indexterm>
<para><computeroutput>void Window::SetWindowHints ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00140">140</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a6aa86d4800090cfeb56c52f63383c179"/><section>
    <title>ShouldClose()</title>
<indexterm><primary>ShouldClose</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>ShouldClose</secondary></indexterm>
<para><computeroutput>int Window::ShouldClose ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00071">71</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a3db46803e892142874ad9e39bce2004c"/><section>
    <title>ShowCursor()</title>
<indexterm><primary>ShowCursor</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>ShowCursor</secondary></indexterm>
<para><computeroutput>void Window::ShowCursor ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00174">174</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a89c434ec340b4594c6c8af3f0bf58c9b"/><section>
    <title>Shutdown()</title>
<indexterm><primary>Shutdown</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>Shutdown</secondary></indexterm>
<para><computeroutput>void Window::Shutdown ( )</computeroutput></para><para>

<para>Method for terminating the window context. </para>
</para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00055">55</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1a6ca97820bbc4ae116168d7241ae737e6"/><section>
    <title>SubscribeToEvents()</title>
<indexterm><primary>SubscribeToEvents</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>SubscribeToEvents</secondary></indexterm>
<para><computeroutput>void Window::SubscribeToEvents (<link linkend="_class_input_controller">InputController</link> * ic)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Method for connecting an input controller to the current window (for &quot;listening&quot; to events) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ic</entry><entry>
<para>The input controller that is being connected </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00204">204</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1abe1b83eda6980f2b9964aab08b5310ed"/><section>
    <title>SwapBuffers()</title>
<indexterm><primary>SwapBuffers</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>SwapBuffers</secondary></indexterm>
<para><computeroutput>void Window::SwapBuffers ( )</computeroutput></para><para>
Definition at line <link linkend="_window_8cpp_source_1l00066">66</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
<anchor xml:id="_class_window_1aebd62a7ffa92777ebf4ec5bc6b1068fc"/><section>
    <title>UnsubscribeFromEvents()</title>
<indexterm><primary>UnsubscribeFromEvents</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>UnsubscribeFromEvents</secondary></indexterm>
<para><computeroutput>void Window::UnsubscribeFromEvents (<link linkend="_class_input_controller">InputController</link> * ic)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Method for disconnecting an input controller from the current window. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ic</entry><entry>
<para>The input controller that is being disconnected </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_window_8cpp_source_1l00209">209</link> of file <link linkend="_window_8cpp_source">window.cpp</link>.</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_class_window_1a083d5a8d8c2dd3a28d1f55d2965db0ab"/><section>
    <title>InputController</title>
<indexterm><primary>InputController</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>InputController</secondary></indexterm>
<para><computeroutput>friend class <link linkend="_class_input_controller">InputController</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_window_8h_source_1l00018">18</link> of file <link linkend="_window_8h_source">window.h</link>.</para>
</section>
<anchor xml:id="_class_window_1adb814fa90d9b6dfb6aaacf436d3b6ee0"/><section>
    <title>WindowCallbacks</title>
<indexterm><primary>WindowCallbacks</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>WindowCallbacks</secondary></indexterm>
<para><computeroutput>friend class <link linkend="_class_window_callbacks">WindowCallbacks</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_window_8h_source_1l00017">17</link> of file <link linkend="_window_8h_source">window.h</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_window_1a232a8164adde7ff4f2dd69bc46819dc3"/><section>
    <title>resolution</title>
<indexterm><primary>resolution</primary><secondary>Window</secondary></indexterm>
<indexterm><primary>Window</primary><secondary>resolution</secondary></indexterm>
<para><computeroutput>glm::ivec2 Window::resolution</computeroutput></para><para>
Definition at line <link linkend="_window_8h_source_1l00090">90</link> of file <link linkend="_window_8h_source">window.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/engine/core/window/<link linkend="_window_8h">window.h</link>src/engine/core/window/<link linkend="_window_8cpp">window.cpp</link></section>
</section>
