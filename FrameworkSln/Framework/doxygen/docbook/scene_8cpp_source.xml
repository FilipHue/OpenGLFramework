<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_scene_8cpp_source" xml:lang="en-US">
<title>scene.cpp</title>
<indexterm><primary>src/components/scene/scene.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_scene_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_scene_8h">scene.h</link>&quot;</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00002"/>00002 
<anchor xml:id="_scene_8cpp_source_1l00003"/><link linkend="_class_scene_1ad10176d75a9cc0da56626f682d083507">00003</link> <link linkend="_class_scene_1ad10176d75a9cc0da56626f682d083507">Scene::Scene</link>()
<anchor xml:id="_scene_8cpp_source_1l00004"/>00004 {
<anchor xml:id="_scene_8cpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;Init();
<anchor xml:id="_scene_8cpp_source_1l00006"/>00006 }
<anchor xml:id="_scene_8cpp_source_1l00007"/>00007 
<anchor xml:id="_scene_8cpp_source_1l00008"/><link linkend="_class_scene_1a9de2fe5d4aa89f9537a76a8a1f0abf4d">00008</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_scene_1a9de2fe5d4aa89f9537a76a8a1f0abf4d">Scene::CreateMesh</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name,&#32;std::vector&lt;Vertex&gt;&amp;&#32;vertices,&#32;std::vector&lt;unsigned&#32;int&gt;&amp;&#32;indices,&#32;<link linkend="_structmaterial">Material</link>*&#32;<link linkend="_structmaterial">material</link>)
<anchor xml:id="_scene_8cpp_source_1l00009"/>00009 {
<anchor xml:id="_scene_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;VAO;
<anchor xml:id="_scene_8cpp_source_1l00011"/>00011 
<anchor xml:id="_scene_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;VAO&#32;=&#32;InitFromData(vertices,&#32;indices);
<anchor xml:id="_scene_8cpp_source_1l00013"/>00013 
<anchor xml:id="_scene_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a17c516524bf6450db5d1048199e59ca0">meshes</link>[name]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_mesh">Mesh</link>(name,&#32;VAO,&#32;vertices,&#32;indices,&#32;<link linkend="_structmaterial">material</link>);
<anchor xml:id="_scene_8cpp_source_1l00015"/>00015 }
<anchor xml:id="_scene_8cpp_source_1l00016"/>00016 
<anchor xml:id="_scene_8cpp_source_1l00017"/><link linkend="_class_scene_1a77d7e54a3d79703adc13f0d51add7be2">00017</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_scene_1a77d7e54a3d79703adc13f0d51add7be2">Scene::RenderMesh</link>(<link linkend="_class_mesh">Mesh</link>*&#32;mesh,&#32;<link linkend="_class_shader">Shader</link>*&#32;shader,&#32;glm::vec3&#32;position)
<anchor xml:id="_scene_8cpp_source_1l00018"/>00018 {
<anchor xml:id="_scene_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh&#32;||&#32;!shader)&#32;{
<anchor xml:id="_scene_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a23eae89d1d25833e2343b5cfd4022063">RENDER_ERROR</link>(<emphasis role="stringliteral">&quot;Render&#32;error!&#32;-&#32;mesh&#32;or&#32;shader&#32;missing&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00023"/>00023 
<anchor xml:id="_scene_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;glm::mat4&#32;model_matrix(1);
<anchor xml:id="_scene_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;model_matrix&#32;=&#32;glm::translate(model_matrix,&#32;position);
<anchor xml:id="_scene_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;SendToShader(mesh,&#32;shader,&#32;model_matrix);
<anchor xml:id="_scene_8cpp_source_1l00027"/>00027 
<anchor xml:id="_scene_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;glBindVertexArray(mesh-&gt;<link linkend="_class_mesh_1abdeea7b206b62ed5c898ea8e3d237244">GetVAO</link>());
<anchor xml:id="_scene_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;glDrawElementsBaseVertex(GL_TRIANGLES,&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>().size(),
<anchor xml:id="_scene_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GL_UNSIGNED_INT,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;*&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>()[0]),&#32;0);
<anchor xml:id="_scene_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;glBindVertexArray(0);
<anchor xml:id="_scene_8cpp_source_1l00032"/>00032 }
<anchor xml:id="_scene_8cpp_source_1l00033"/>00033 
<anchor xml:id="_scene_8cpp_source_1l00034"/><link linkend="_class_scene_1a5f3f15a2952541b0272e8ee031fa8eb7">00034</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_scene_1a77d7e54a3d79703adc13f0d51add7be2">Scene::RenderMesh</link>(<link linkend="_class_mesh">Mesh</link>*&#32;mesh,&#32;<link linkend="_class_shader">Shader</link>*&#32;shader,&#32;glm::vec3&#32;position,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;texture_name)
<anchor xml:id="_scene_8cpp_source_1l00035"/>00035 {
<anchor xml:id="_scene_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh&#32;||&#32;!shader&#32;||&#32;!<link linkend="_class_scene_1ab905449eea56603315d2ff0a26172cf7">p_texture_manager</link>-&gt;<link linkend="_class_texture_manger_1a4e88fc790721433c962598f141096f89">GetTexture2D</link>(texture_name))&#32;{
<anchor xml:id="_scene_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a23eae89d1d25833e2343b5cfd4022063">RENDER_ERROR</link>(<emphasis role="stringliteral">&quot;Render&#32;error!&#32;-&#32;mesh,&#32;shader&#32;or&#32;texture&#32;missing&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00040"/>00040 
<anchor xml:id="_scene_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shader&#32;!=&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;TextureShader&quot;</emphasis>])&#32;{
<anchor xml:id="_scene_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a486cb435761adba8a3b3cf162859f0e3">RENDER_WARN</link>(<emphasis role="stringliteral">&quot;Wrong&#32;texture&#32;for&#32;using&#32;shaders.&#32;You&#32;might&#32;want&#32;to&#32;use&#32;TextureShader&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00044"/>00044 
<anchor xml:id="_scene_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;glm::mat4&#32;model_matrix(1);
<anchor xml:id="_scene_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;model_matrix&#32;=&#32;glm::translate(model_matrix,&#32;position);
<anchor xml:id="_scene_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;SendToShader(mesh,&#32;shader,&#32;model_matrix);
<anchor xml:id="_scene_8cpp_source_1l00048"/>00048 
<anchor xml:id="_scene_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;glBindVertexArray(mesh-&gt;<link linkend="_class_mesh_1abdeea7b206b62ed5c898ea8e3d237244">GetVAO</link>());
<anchor xml:id="_scene_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;glBindTexture(GL_TEXTURE_2D,&#32;<link linkend="_class_scene_1ab905449eea56603315d2ff0a26172cf7">p_texture_manager</link>-&gt;<link linkend="_class_texture_manger_1a4e88fc790721433c962598f141096f89">GetTexture2D</link>(texture_name)-&gt;<link linkend="_class_texture2_d_1a4b6d5b8203df33567ed1e8ad016a6d7f">GetTextureID</link>());
<anchor xml:id="_scene_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;glDrawElementsBaseVertex(GL_TRIANGLES,&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>().size(),
<anchor xml:id="_scene_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GL_UNSIGNED_INT,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;*&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>()[0]),&#32;0);
<anchor xml:id="_scene_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;glBindVertexArray(0);
<anchor xml:id="_scene_8cpp_source_1l00054"/>00054 }
<anchor xml:id="_scene_8cpp_source_1l00055"/>00055 
<anchor xml:id="_scene_8cpp_source_1l00056"/><link linkend="_class_scene_1a2c264a6e1c11d0124ad5817393296331">00056</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_scene_1a77d7e54a3d79703adc13f0d51add7be2">Scene::RenderMesh</link>(<link linkend="_class_mesh">Mesh</link>*&#32;mesh,&#32;<link linkend="_class_shader">Shader</link>*&#32;shader,&#32;glm::vec3&#32;position,&#32;glm::vec3&#32;light_position)
<anchor xml:id="_scene_8cpp_source_1l00057"/>00057 {
<anchor xml:id="_scene_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh&#32;||&#32;!shader)&#32;{
<anchor xml:id="_scene_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a23eae89d1d25833e2343b5cfd4022063">RENDER_ERROR</link>(<emphasis role="stringliteral">&quot;Render&#32;error!&#32;-&#32;mesh&#32;or&#32;shader&#32;missing&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00062"/>00062 
<anchor xml:id="_scene_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;glm::mat4&#32;model_matrix(1);
<anchor xml:id="_scene_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;model_matrix&#32;=&#32;glm::translate(model_matrix,&#32;position);
<anchor xml:id="_scene_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;SendToShader(mesh,&#32;shader,&#32;model_matrix);
<anchor xml:id="_scene_8cpp_source_1l00066"/>00066 
<anchor xml:id="_scene_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_scene_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec3&#32;Ka&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1af632818ebb9719ee9a6bb9c2b5122504">Ka</link>;
<anchor xml:id="_scene_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec3&#32;Kd&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1a665292640cc52bde33c2bf9dd8b93551">Kd</link>;
<anchor xml:id="_scene_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec3&#32;Ksp&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1a95ce8a36cb532bd25a2a97b83fe7de36">Ksp</link>;
<anchor xml:id="_scene_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;Ksh&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1a75a7b1f8b3d8820a2a5a0ec976e8bc84">Ksh</link>;
<anchor xml:id="_scene_8cpp_source_1l00072"/>00072 
<anchor xml:id="_scene_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">SetVec3</link>(<emphasis role="stringliteral">&quot;Ka&quot;</emphasis>,&#32;Ka);
<anchor xml:id="_scene_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">SetVec3</link>(<emphasis role="stringliteral">&quot;Kd&quot;</emphasis>,&#32;Kd);
<anchor xml:id="_scene_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">SetVec3</link>(<emphasis role="stringliteral">&quot;Ksp&quot;</emphasis>,&#32;Ksp);
<anchor xml:id="_scene_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1ac20ee02a436e4baeb63dde08a0364574">SetFloat</link>(<emphasis role="stringliteral">&quot;Ksh&quot;</emphasis>,&#32;Ksh);
<anchor xml:id="_scene_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_scene_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh-&gt;<link linkend="_class_mesh_1a7dafd24a0b4c8db87ab8c0b075326662">GetError</link>())&#32;{
<anchor xml:id="_scene_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a486cb435761adba8a3b3cf162859f0e3">RENDER_WARN</link>(<emphasis role="stringliteral">&quot;Mesh&#32;object&#32;{0}&#32;has&#32;no&#32;material&#32;attached&quot;</emphasis>,&#32;mesh-&gt;<link linkend="_class_mesh_1a84a579817f5c86e8e4840f0f2f5f5d0f">GetMeshId</link>());
<anchor xml:id="_scene_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mesh-&gt;<link linkend="_class_mesh_1a51777273f23b1e3a5cb798873a33a892">HasError</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00085"/>00085 
<anchor xml:id="_scene_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;glm::vec3&#32;lightColour&#32;=&#32;glm::vec3(1.0f,&#32;1.0f,&#32;0.8f);
<anchor xml:id="_scene_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;glm::vec3&#32;objectColour&#32;=&#32;glm::vec3(<link linkend="_colour_8h_1a5ccb6d6ce1d51d4729846edfbcc9ee1a">GREY</link>.<link linkend="_structcolour_1a6e3381fde963af89e7a3c6784469410d">red</link>,&#32;<link linkend="_colour_8h_1a5ccb6d6ce1d51d4729846edfbcc9ee1a">GREY</link>.<link linkend="_structcolour_1af8b67df884a33ddf394c54114c3a6408">green</link>,&#32;<link linkend="_colour_8h_1a5ccb6d6ce1d51d4729846edfbcc9ee1a">GREY</link>.<link linkend="_structcolour_1a81f515663e58b78f6e76d06ff77467f4">blue</link>);
<anchor xml:id="_scene_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;glm::vec3&#32;viewPosition&#32;=&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a948a60a6eb780a313ed59690bbaef811">GetCameraPosition</link>();
<anchor xml:id="_scene_8cpp_source_1l00089"/>00089 
<anchor xml:id="_scene_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;light_position&quot;</emphasis>,&#32;light_position);
<anchor xml:id="_scene_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;lightColour&quot;</emphasis>,&#32;lightColour);
<anchor xml:id="_scene_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;objectColour&quot;</emphasis>,&#32;objectColour);
<anchor xml:id="_scene_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;viewPosition&quot;</emphasis>,&#32;viewPosition);
<anchor xml:id="_scene_8cpp_source_1l00094"/>00094 
<anchor xml:id="_scene_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;glBindVertexArray(mesh-&gt;<link linkend="_class_mesh_1abdeea7b206b62ed5c898ea8e3d237244">GetVAO</link>());
<anchor xml:id="_scene_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;glDrawElementsBaseVertex(GL_TRIANGLES,&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>().size(),
<anchor xml:id="_scene_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GL_UNSIGNED_INT,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;*&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>()[0]),&#32;0);
<anchor xml:id="_scene_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;glBindVertexArray(0);
<anchor xml:id="_scene_8cpp_source_1l00099"/>00099 }
<anchor xml:id="_scene_8cpp_source_1l00100"/>00100 
<anchor xml:id="_scene_8cpp_source_1l00101"/><link linkend="_class_scene_1a9cfa3b7cf903638a3e4e7578ee4f2fa5">00101</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_scene_1a77d7e54a3d79703adc13f0d51add7be2">Scene::RenderMesh</link>(<link linkend="_class_mesh">Mesh</link>*&#32;mesh,&#32;<link linkend="_class_shader">Shader</link>*&#32;shader,&#32;glm::mat4&#32;model_matrix)
<anchor xml:id="_scene_8cpp_source_1l00102"/>00102 {
<anchor xml:id="_scene_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh&#32;||&#32;!shader)&#32;{
<anchor xml:id="_scene_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a23eae89d1d25833e2343b5cfd4022063">RENDER_ERROR</link>(<emphasis role="stringliteral">&quot;Render&#32;error!&#32;-&#32;mesh&#32;or&#32;shader&#32;missing&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00107"/>00107 
<anchor xml:id="_scene_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;SendToShader(mesh,&#32;shader,&#32;model_matrix);
<anchor xml:id="_scene_8cpp_source_1l00109"/>00109 
<anchor xml:id="_scene_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;glBindVertexArray(mesh-&gt;<link linkend="_class_mesh_1abdeea7b206b62ed5c898ea8e3d237244">GetVAO</link>());
<anchor xml:id="_scene_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;glDrawElementsBaseVertex(GL_TRIANGLES,&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>().size(),
<anchor xml:id="_scene_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GL_UNSIGNED_INT,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;*&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>()[0]),&#32;0);
<anchor xml:id="_scene_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;glBindVertexArray(0);
<anchor xml:id="_scene_8cpp_source_1l00114"/>00114 }
<anchor xml:id="_scene_8cpp_source_1l00115"/>00115 
<anchor xml:id="_scene_8cpp_source_1l00116"/><link linkend="_class_scene_1af5436d5ef264f477be8a29bfd0365d17">00116</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_scene_1a77d7e54a3d79703adc13f0d51add7be2">Scene::RenderMesh</link>(<link linkend="_class_mesh">Mesh</link>*&#32;mesh,&#32;<link linkend="_class_shader">Shader</link>*&#32;shader,&#32;glm::mat4&#32;model_matrix,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;texture_name)
<anchor xml:id="_scene_8cpp_source_1l00117"/>00117 {
<anchor xml:id="_scene_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh&#32;||&#32;!shader&#32;||&#32;!<link linkend="_class_scene_1ab905449eea56603315d2ff0a26172cf7">p_texture_manager</link>-&gt;<link linkend="_class_texture_manger_1a4e88fc790721433c962598f141096f89">GetTexture2D</link>(texture_name))&#32;{
<anchor xml:id="_scene_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a23eae89d1d25833e2343b5cfd4022063">RENDER_ERROR</link>(<emphasis role="stringliteral">&quot;Render&#32;error!&#32;-&#32;mesh,&#32;shader&#32;or&#32;texture&#32;missing&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00122"/>00122 
<anchor xml:id="_scene_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shader&#32;!=&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;TextureShader&quot;</emphasis>])&#32;{
<anchor xml:id="_scene_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a486cb435761adba8a3b3cf162859f0e3">RENDER_WARN</link>(<emphasis role="stringliteral">&quot;Wrong&#32;texture&#32;for&#32;using&#32;shaders.&#32;You&#32;might&#32;want&#32;to&#32;use&#32;TextureShader&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00126"/>00126 
<anchor xml:id="_scene_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;SendToShader(mesh,&#32;shader,&#32;model_matrix);
<anchor xml:id="_scene_8cpp_source_1l00128"/>00128 
<anchor xml:id="_scene_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;glBindVertexArray(mesh-&gt;<link linkend="_class_mesh_1abdeea7b206b62ed5c898ea8e3d237244">GetVAO</link>());
<anchor xml:id="_scene_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;glBindTexture(GL_TEXTURE_2D,&#32;<link linkend="_class_scene_1ab905449eea56603315d2ff0a26172cf7">p_texture_manager</link>-&gt;<link linkend="_class_texture_manger_1a4e88fc790721433c962598f141096f89">GetTexture2D</link>(texture_name)-&gt;<link linkend="_class_texture2_d_1a4b6d5b8203df33567ed1e8ad016a6d7f">GetTextureID</link>());
<anchor xml:id="_scene_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;glDrawElementsBaseVertex(GL_TRIANGLES,&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>().size(),
<anchor xml:id="_scene_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GL_UNSIGNED_INT,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;*&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>()[0]),&#32;0);
<anchor xml:id="_scene_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;glBindVertexArray(0);
<anchor xml:id="_scene_8cpp_source_1l00134"/>00134 }
<anchor xml:id="_scene_8cpp_source_1l00135"/>00135 
<anchor xml:id="_scene_8cpp_source_1l00136"/><link linkend="_class_scene_1ac8b3aa98fd51cef42210c80062d0b0d8">00136</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_scene_1a77d7e54a3d79703adc13f0d51add7be2">Scene::RenderMesh</link>(<link linkend="_class_mesh">Mesh</link>*&#32;mesh,&#32;<link linkend="_class_shader">Shader</link>*&#32;shader,&#32;glm::mat4&#32;model_matrix,&#32;glm::vec3&#32;light_position)
<anchor xml:id="_scene_8cpp_source_1l00137"/>00137 {
<anchor xml:id="_scene_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh&#32;||&#32;!shader)&#32;{
<anchor xml:id="_scene_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a23eae89d1d25833e2343b5cfd4022063">RENDER_ERROR</link>(<emphasis role="stringliteral">&quot;Render&#32;error!&#32;-&#32;mesh&#32;or&#32;shader&#32;missing&quot;</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00142"/>00142 
<anchor xml:id="_scene_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;SendToShader(mesh,&#32;shader,&#32;model_matrix);
<anchor xml:id="_scene_8cpp_source_1l00144"/>00144 
<anchor xml:id="_scene_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_scene_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec3&#32;Ka&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1af632818ebb9719ee9a6bb9c2b5122504">Ka</link>;
<anchor xml:id="_scene_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec3&#32;Kd&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1a665292640cc52bde33c2bf9dd8b93551">Kd</link>;
<anchor xml:id="_scene_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec3&#32;Ksp&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1a95ce8a36cb532bd25a2a97b83fe7de36">Ksp</link>;
<anchor xml:id="_scene_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;Ksh&#32;=&#32;mesh-&gt;<link linkend="_class_mesh_1a8529bb5172422e3e527da9bfe88f7c20">GetMaterial</link>()-&gt;<link linkend="_structmaterial_1a75a7b1f8b3d8820a2a5a0ec976e8bc84">Ksh</link>;
<anchor xml:id="_scene_8cpp_source_1l00150"/>00150 
<anchor xml:id="_scene_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">SetVec3</link>(<emphasis role="stringliteral">&quot;Ka&quot;</emphasis>,&#32;Ka);
<anchor xml:id="_scene_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">SetVec3</link>(<emphasis role="stringliteral">&quot;Kd&quot;</emphasis>,&#32;Kd);
<anchor xml:id="_scene_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1acddd2cf07b0b37f0cdfbb44074863c91">SetVec3</link>(<emphasis role="stringliteral">&quot;Ksp&quot;</emphasis>,&#32;Ksp);
<anchor xml:id="_scene_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1ac20ee02a436e4baeb63dde08a0364574">SetFloat</link>(<emphasis role="stringliteral">&quot;Ksh&quot;</emphasis>,&#32;Ksh);
<anchor xml:id="_scene_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_scene_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mesh-&gt;<link linkend="_class_mesh_1a7dafd24a0b4c8db87ab8c0b075326662">GetError</link>())&#32;{
<anchor xml:id="_scene_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8h_1a486cb435761adba8a3b3cf162859f0e3">RENDER_WARN</link>(<emphasis role="stringliteral">&quot;Mesh&#32;object&#32;{0}&#32;has&#32;no&#32;material&#32;attached&quot;</emphasis>,&#32;mesh-&gt;<link linkend="_class_mesh_1a84a579817f5c86e8e4840f0f2f5f5d0f">GetMeshId</link>());
<anchor xml:id="_scene_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mesh-&gt;<link linkend="_class_mesh_1a51777273f23b1e3a5cb798873a33a892">HasError</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_scene_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;}
<anchor xml:id="_scene_8cpp_source_1l00163"/>00163 
<anchor xml:id="_scene_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;glm::vec3&#32;lightColour&#32;=&#32;glm::vec3(1.0f,&#32;1.0f,&#32;0.8f);
<anchor xml:id="_scene_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;glm::vec3&#32;objectColour&#32;=&#32;glm::vec3(<link linkend="_colour_8h_1a5ccb6d6ce1d51d4729846edfbcc9ee1a">GREY</link>.<link linkend="_structcolour_1a6e3381fde963af89e7a3c6784469410d">red</link>,&#32;<link linkend="_colour_8h_1a5ccb6d6ce1d51d4729846edfbcc9ee1a">GREY</link>.<link linkend="_structcolour_1af8b67df884a33ddf394c54114c3a6408">green</link>,&#32;<link linkend="_colour_8h_1a5ccb6d6ce1d51d4729846edfbcc9ee1a">GREY</link>.<link linkend="_structcolour_1a81f515663e58b78f6e76d06ff77467f4">blue</link>);
<anchor xml:id="_scene_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;glm::vec3&#32;viewPosition&#32;=&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a948a60a6eb780a313ed59690bbaef811">GetCameraPosition</link>();
<anchor xml:id="_scene_8cpp_source_1l00167"/>00167 
<anchor xml:id="_scene_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;light_position&quot;</emphasis>,&#32;light_position);
<anchor xml:id="_scene_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;lightColour&quot;</emphasis>,&#32;lightColour);
<anchor xml:id="_scene_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;objectColour&quot;</emphasis>,&#32;objectColour);
<anchor xml:id="_scene_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]-&gt;SetVec3(<emphasis role="stringliteral">&quot;viewPosition&quot;</emphasis>,&#32;viewPosition);
<anchor xml:id="_scene_8cpp_source_1l00172"/>00172 
<anchor xml:id="_scene_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;glBindVertexArray(mesh-&gt;<link linkend="_class_mesh_1abdeea7b206b62ed5c898ea8e3d237244">GetVAO</link>());
<anchor xml:id="_scene_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;glDrawElementsBaseVertex(GL_TRIANGLES,&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>().size(),
<anchor xml:id="_scene_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GL_UNSIGNED_INT,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;*&#32;mesh-&gt;<link linkend="_class_mesh_1aaaa51cde5fad8e11a6d22cf92318239f">GetIndices</link>()[0]),&#32;0);
<anchor xml:id="_scene_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;glBindVertexArray(0);
<anchor xml:id="_scene_8cpp_source_1l00177"/>00177 }
<anchor xml:id="_scene_8cpp_source_1l00178"/>00178 
<anchor xml:id="_scene_8cpp_source_1l00179"/>00179 <emphasis role="keywordtype">void</emphasis>&#32;Scene::Init()
<anchor xml:id="_scene_8cpp_source_1l00180"/>00180 {
<anchor xml:id="_scene_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1ae2b329139aeb75b95cfa41297a90b1be">p_window</link>&#32;=&#32;<link linkend="_class_engine_1a77697a5d3d4fb8b8ef84b07d71567b0e">Engine::GetWindow</link>();
<anchor xml:id="_scene_8cpp_source_1l00182"/>00182 
<anchor xml:id="_scene_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_camera">Camera</link>();
<anchor xml:id="_scene_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<emphasis role="comment">//sceneCamera-&gt;SetOrtho(0.0f,&#32;(float)p_window-&gt;resolution.x,&#32;0.0f,&#32;(float)p_window-&gt;resolution.y,&#32;0.01f,&#32;400.0f);</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a957cabb04b3e3cb66459435b2aaf7413">SetPerspective</link>(<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1aaa3f621854140e62e4e05db603da60e4">GetCameraZoom</link>(),&#32;(<emphasis role="keywordtype">float</emphasis>)<link linkend="_class_scene_1ae2b329139aeb75b95cfa41297a90b1be">p_window</link>-&gt;<link linkend="_class_window_1a232a8164adde7ff4f2dd69bc46819dc3">resolution</link>.x&#32;/&#32;<link linkend="_class_scene_1ae2b329139aeb75b95cfa41297a90b1be">p_window</link>-&gt;<link linkend="_class_window_1a232a8164adde7ff4f2dd69bc46819dc3">resolution</link>.y,&#32;0.1f,&#32;200.0f);
<anchor xml:id="_scene_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1ae8f7639d0227ed705f883d9debba12c2">p_camera_input</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_camera_input">CameraInput</link>(<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>);
<anchor xml:id="_scene_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a73a7a8f6d8741fdf66b092fdd7da9b1d">p_scene_input</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_scene_1ae9ac4693fbc4e101d5581859b7589d21">SceneInput</link>(<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00188"/>00188 
<anchor xml:id="_scene_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a4c54a24f162c9d5652a72b36df6928f2">p_shape_manager</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_scene_1a235814840b9b0394dc2e28813a04a187">ShapeManager</link>(<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_scene_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1ab905449eea56603315d2ff0a26172cf7">p_texture_manager</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_texture_manger">TextureManger</link>();
<anchor xml:id="_scene_8cpp_source_1l00191"/>00191 
<anchor xml:id="_scene_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<link linkend="_class_shader">Shader</link>*&#32;simple_shader&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_shader">Shader</link>(
<anchor xml:id="_scene_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;D:\\OPGLFW_V2.0\\FrameworkSln\\Framework\\assets\\shaders\\simple\\simple_vertex_shader.glsl&quot;</emphasis>,
<anchor xml:id="_scene_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;D:\\OPGLFW_V2.0\\FrameworkSln\\Framework\\assets\\shaders\\simple\\simple_fragment_shader.glsl&quot;</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;);
<anchor xml:id="_scene_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;SimpleShader&quot;</emphasis>]&#32;=&#32;simple_shader;
<anchor xml:id="_scene_8cpp_source_1l00197"/>00197 
<anchor xml:id="_scene_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<link linkend="_class_shader">Shader</link>*&#32;texture_shader&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_shader">Shader</link>(
<anchor xml:id="_scene_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;D:\\OPGLFW_V2.0\\FrameworkSln\\Framework\\assets\\shaders\\texture\\texture_vertex_shader.glsl&quot;</emphasis>,
<anchor xml:id="_scene_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;D:\\OPGLFW_V2.0\\FrameworkSln\\Framework\\assets\\shaders\\texture\\texture_fragment_shader.glsl&quot;</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;);
<anchor xml:id="_scene_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;TextureShader&quot;</emphasis>]&#32;=&#32;texture_shader;
<anchor xml:id="_scene_8cpp_source_1l00203"/>00203 
<anchor xml:id="_scene_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<link linkend="_class_shader">Shader</link>*&#32;phong_shader&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_shader">Shader</link>(
<anchor xml:id="_scene_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;D:\\OPGLFW_V2.0\\FrameworkSln\\Framework\\assets\\shaders\\lighting\\phong_vertex_shader.glsl&quot;</emphasis>,
<anchor xml:id="_scene_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;D:\\OPGLFW_V2.0\\FrameworkSln\\Framework\\assets\\shaders\\lighting\\phong_fragment_shader.glsl&quot;</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;);
<anchor xml:id="_scene_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a76ad89c41f3186072ae53a10bbfcd8e1">shaders</link>[<emphasis role="stringliteral">&quot;PhongShader&quot;</emphasis>]&#32;=&#32;phong_shader;
<anchor xml:id="_scene_8cpp_source_1l00209"/>00209 
<anchor xml:id="_scene_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;glDepthMask(GL_TRUE);
<anchor xml:id="_scene_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;glEnable(GL_DEPTH_TEST);
<anchor xml:id="_scene_8cpp_source_1l00212"/>00212 }
<anchor xml:id="_scene_8cpp_source_1l00213"/>00213 
<anchor xml:id="_scene_8cpp_source_1l00214"/>00214 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Scene::InitFromData(std::vector&lt;Vertex&gt;&amp;&#32;vertices,&#32;std::vector&lt;unsigned&#32;int&gt;&amp;&#32;indices)
<anchor xml:id="_scene_8cpp_source_1l00215"/>00215 {
<anchor xml:id="_scene_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;VAO;
<anchor xml:id="_scene_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;VBO;
<anchor xml:id="_scene_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;IBO;
<anchor xml:id="_scene_8cpp_source_1l00219"/>00219 
<anchor xml:id="_scene_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;glGenVertexArrays(1,&#32;&amp;VAO);
<anchor xml:id="_scene_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;glBindVertexArray(VAO);
<anchor xml:id="_scene_8cpp_source_1l00222"/>00222 
<anchor xml:id="_scene_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;glGenBuffers(1,&#32;&amp;VBO);
<anchor xml:id="_scene_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;glBindBuffer(GL_ARRAY_BUFFER,&#32;VBO);
<anchor xml:id="_scene_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;glBufferData(GL_ARRAY_BUFFER,&#32;<emphasis role="keyword">sizeof</emphasis>(vertices[0])&#32;*&#32;vertices.size(),&#32;&amp;vertices[0],&#32;GL_STATIC_DRAW);
<anchor xml:id="_scene_8cpp_source_1l00226"/>00226 
<anchor xml:id="_scene_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;glGenBuffers(1,&#32;&amp;IBO);
<anchor xml:id="_scene_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,&#32;IBO);
<anchor xml:id="_scene_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;glBufferData(GL_ELEMENT_ARRAY_BUFFER,&#32;<emphasis role="keyword">sizeof</emphasis>(indices[0])&#32;*&#32;indices.size(),&#32;&amp;indices[0],&#32;GL_STATIC_DRAW);
<anchor xml:id="_scene_8cpp_source_1l00230"/>00230 
<anchor xml:id="_scene_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Vertex&#32;position</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;glEnableVertexAttribArray(0);
<anchor xml:id="_scene_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;glVertexAttribPointer(0,&#32;3,&#32;GL_FLOAT,&#32;GL_FALSE,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structvertex">Vertex</link>),&#32;(<emphasis role="keywordtype">void</emphasis>*)0);
<anchor xml:id="_scene_8cpp_source_1l00234"/>00234 
<anchor xml:id="_scene_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Vertex&#32;colour</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;glEnableVertexAttribArray(1);
<anchor xml:id="_scene_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;glVertexAttribPointer(1,&#32;3,&#32;GL_FLOAT,&#32;GL_FALSE,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structvertex">Vertex</link>),&#32;(<emphasis role="keywordtype">void</emphasis>*)(<emphasis role="keyword">sizeof</emphasis>(glm::vec3)));
<anchor xml:id="_scene_8cpp_source_1l00238"/>00238 
<anchor xml:id="_scene_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Vertex&#32;normal</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;glEnableVertexAttribArray(2);
<anchor xml:id="_scene_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;glVertexAttribPointer(2,&#32;3,&#32;GL_FLOAT,&#32;GL_FALSE,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structvertex">Vertex</link>),&#32;(<emphasis role="keywordtype">void</emphasis>*)(2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(glm::vec3)));
<anchor xml:id="_scene_8cpp_source_1l00242"/>00242 
<anchor xml:id="_scene_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Vertex&#32;texel</emphasis>
<anchor xml:id="_scene_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;glEnableVertexAttribArray(3);
<anchor xml:id="_scene_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;glVertexAttribPointer(3,&#32;2,&#32;GL_FLOAT,&#32;GL_FALSE,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structvertex">Vertex</link>),&#32;(<emphasis role="keywordtype">void</emphasis>*)(3&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(glm::vec3)));
<anchor xml:id="_scene_8cpp_source_1l00246"/>00246 
<anchor xml:id="_scene_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;glBindVertexArray(0);
<anchor xml:id="_scene_8cpp_source_1l00248"/>00248 
<anchor xml:id="_scene_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VAO;
<anchor xml:id="_scene_8cpp_source_1l00250"/>00250 }
<anchor xml:id="_scene_8cpp_source_1l00251"/>00251 
<anchor xml:id="_scene_8cpp_source_1l00252"/>00252 <emphasis role="keywordtype">void</emphasis>&#32;Scene::SendToShader(<link linkend="_class_mesh">Mesh</link>*&#32;mesh,&#32;<link linkend="_class_shader">Shader</link>*&#32;shader,&#32;glm::mat4&#32;model_matrix)
<anchor xml:id="_scene_8cpp_source_1l00253"/>00253 {
<anchor xml:id="_scene_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a8f72c7892eb8410c485b6994c355aa8e">SetViewMatrix</link>(glm::lookAt(<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a948a60a6eb780a313ed59690bbaef811">GetCameraPosition</link>(),&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a948a60a6eb780a313ed59690bbaef811">GetCameraPosition</link>()&#32;+&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a61ff46e569c45d4b200697283a901aa2">GetCameraForward</link>(),&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a8d18b048f90d65c2903232145fa46194">GetCameraUp</link>()));
<anchor xml:id="_scene_8cpp_source_1l00255"/>00255 
<anchor xml:id="_scene_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1a6b11327cff651ffdb22988b6917b1650">Use</link>();
<anchor xml:id="_scene_8cpp_source_1l00257"/>00257 
<anchor xml:id="_scene_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;glm::mat4&#32;projection&#32;=&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a57821a53306289b0f63050b43b57fa0a">GetProjection</link>();
<anchor xml:id="_scene_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;glm::mat4&#32;view&#32;=&#32;<link linkend="_class_scene_1a0b26384e4afe100d4209b7ded40379d2">p_scene_camera</link>-&gt;<link linkend="_class_camera_1a98061be0e846f5a6e6475961a2b10d42">GetView</link>();
<anchor xml:id="_scene_8cpp_source_1l00260"/>00260 
<anchor xml:id="_scene_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1a250ff0e81a022d4ab8ab1f8206e8c91b">SetMat4</link>(<emphasis role="stringliteral">&quot;projectionMatrix&quot;</emphasis>,&#32;projection);
<anchor xml:id="_scene_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1a250ff0e81a022d4ab8ab1f8206e8c91b">SetMat4</link>(<emphasis role="stringliteral">&quot;viewMatrix&quot;</emphasis>,&#32;view);
<anchor xml:id="_scene_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;shader-&gt;<link linkend="_class_shader_1a250ff0e81a022d4ab8ab1f8206e8c91b">SetMat4</link>(<emphasis role="stringliteral">&quot;modelMatrix&quot;</emphasis>,&#32;model_matrix);
<anchor xml:id="_scene_8cpp_source_1l00264"/>00264 }
</programlisting></section>
